# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ot3D')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ot3D')
    _ot3D = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ot3D', [dirname(__file__)])
        except ImportError:
            import _ot3D
            return _ot3D
        try:
            _mod = imp.load_module('_ot3D', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ot3D = swig_import_helper()
    del swig_import_helper
else:
    import _ot3D
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ot3D.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ot3D.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ot3D.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ot3D.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ot3D.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ot3D.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ot3D.SwigPyIterator_copy(self)

    def next(self):
        return _ot3D.SwigPyIterator_next(self)

    def __next__(self):
        return _ot3D.SwigPyIterator___next__(self)

    def previous(self):
        return _ot3D.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ot3D.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ot3D.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ot3D.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ot3D.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ot3D.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ot3D.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ot3D.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ot3D.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.IntList___nonzero__(self)

    def __bool__(self):
        return _ot3D.IntList___bool__(self)

    def __len__(self):
        return _ot3D.IntList___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.IntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.IntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.IntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.IntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.IntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.IntList___setitem__(self, *args)

    def pop(self):
        return _ot3D.IntList_pop(self)

    def append(self, x):
        return _ot3D.IntList_append(self, x)

    def empty(self):
        return _ot3D.IntList_empty(self)

    def size(self):
        return _ot3D.IntList_size(self)

    def swap(self, v):
        return _ot3D.IntList_swap(self, v)

    def begin(self):
        return _ot3D.IntList_begin(self)

    def end(self):
        return _ot3D.IntList_end(self)

    def rbegin(self):
        return _ot3D.IntList_rbegin(self)

    def rend(self):
        return _ot3D.IntList_rend(self)

    def clear(self):
        return _ot3D.IntList_clear(self)

    def get_allocator(self):
        return _ot3D.IntList_get_allocator(self)

    def pop_back(self):
        return _ot3D.IntList_pop_back(self)

    def erase(self, *args):
        return _ot3D.IntList_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_IntList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.IntList_push_back(self, x)

    def front(self):
        return _ot3D.IntList_front(self)

    def back(self):
        return _ot3D.IntList_back(self)

    def assign(self, n, x):
        return _ot3D.IntList_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.IntList_resize(self, *args)

    def insert(self, *args):
        return _ot3D.IntList_insert(self, *args)

    def pop_front(self):
        return _ot3D.IntList_pop_front(self)

    def push_front(self, x):
        return _ot3D.IntList_push_front(self, x)

    def reverse(self):
        return _ot3D.IntList_reverse(self)
    __swig_destroy__ = _ot3D.delete_IntList
    __del__ = lambda self: None
IntList_swigregister = _ot3D.IntList_swigregister
IntList_swigregister(IntList)

class DoubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.DoubleList___nonzero__(self)

    def __bool__(self):
        return _ot3D.DoubleList___bool__(self)

    def __len__(self):
        return _ot3D.DoubleList___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.DoubleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.DoubleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.DoubleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.DoubleList___setitem__(self, *args)

    def pop(self):
        return _ot3D.DoubleList_pop(self)

    def append(self, x):
        return _ot3D.DoubleList_append(self, x)

    def empty(self):
        return _ot3D.DoubleList_empty(self)

    def size(self):
        return _ot3D.DoubleList_size(self)

    def swap(self, v):
        return _ot3D.DoubleList_swap(self, v)

    def begin(self):
        return _ot3D.DoubleList_begin(self)

    def end(self):
        return _ot3D.DoubleList_end(self)

    def rbegin(self):
        return _ot3D.DoubleList_rbegin(self)

    def rend(self):
        return _ot3D.DoubleList_rend(self)

    def clear(self):
        return _ot3D.DoubleList_clear(self)

    def get_allocator(self):
        return _ot3D.DoubleList_get_allocator(self)

    def pop_back(self):
        return _ot3D.DoubleList_pop_back(self)

    def erase(self, *args):
        return _ot3D.DoubleList_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_DoubleList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.DoubleList_push_back(self, x)

    def front(self):
        return _ot3D.DoubleList_front(self)

    def back(self):
        return _ot3D.DoubleList_back(self)

    def assign(self, n, x):
        return _ot3D.DoubleList_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.DoubleList_resize(self, *args)

    def insert(self, *args):
        return _ot3D.DoubleList_insert(self, *args)

    def pop_front(self):
        return _ot3D.DoubleList_pop_front(self)

    def push_front(self, x):
        return _ot3D.DoubleList_push_front(self, x)

    def reverse(self):
        return _ot3D.DoubleList_reverse(self)
    __swig_destroy__ = _ot3D.delete_DoubleList
    __del__ = lambda self: None
DoubleList_swigregister = _ot3D.DoubleList_swigregister
DoubleList_swigregister(DoubleList)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.IntVector___nonzero__(self)

    def __bool__(self):
        return _ot3D.IntVector___bool__(self)

    def __len__(self):
        return _ot3D.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.IntVector___setitem__(self, *args)

    def pop(self):
        return _ot3D.IntVector_pop(self)

    def append(self, x):
        return _ot3D.IntVector_append(self, x)

    def empty(self):
        return _ot3D.IntVector_empty(self)

    def size(self):
        return _ot3D.IntVector_size(self)

    def swap(self, v):
        return _ot3D.IntVector_swap(self, v)

    def begin(self):
        return _ot3D.IntVector_begin(self)

    def end(self):
        return _ot3D.IntVector_end(self)

    def rbegin(self):
        return _ot3D.IntVector_rbegin(self)

    def rend(self):
        return _ot3D.IntVector_rend(self)

    def clear(self):
        return _ot3D.IntVector_clear(self)

    def get_allocator(self):
        return _ot3D.IntVector_get_allocator(self)

    def pop_back(self):
        return _ot3D.IntVector_pop_back(self)

    def erase(self, *args):
        return _ot3D.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.IntVector_push_back(self, x)

    def front(self):
        return _ot3D.IntVector_front(self)

    def back(self):
        return _ot3D.IntVector_back(self)

    def assign(self, n, x):
        return _ot3D.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.IntVector_resize(self, *args)

    def insert(self, *args):
        return _ot3D.IntVector_insert(self, *args)

    def reserve(self, n):
        return _ot3D.IntVector_reserve(self, n)

    def capacity(self):
        return _ot3D.IntVector_capacity(self)
    __swig_destroy__ = _ot3D.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _ot3D.IntVector_swigregister
IntVector_swigregister(IntVector)

class adj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adj, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.adj_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.adj___nonzero__(self)

    def __bool__(self):
        return _ot3D.adj___bool__(self)

    def __len__(self):
        return _ot3D.adj___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.adj___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.adj___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.adj___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.adj___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.adj___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.adj___setitem__(self, *args)

    def pop(self):
        return _ot3D.adj_pop(self)

    def append(self, x):
        return _ot3D.adj_append(self, x)

    def empty(self):
        return _ot3D.adj_empty(self)

    def size(self):
        return _ot3D.adj_size(self)

    def swap(self, v):
        return _ot3D.adj_swap(self, v)

    def begin(self):
        return _ot3D.adj_begin(self)

    def end(self):
        return _ot3D.adj_end(self)

    def rbegin(self):
        return _ot3D.adj_rbegin(self)

    def rend(self):
        return _ot3D.adj_rend(self)

    def clear(self):
        return _ot3D.adj_clear(self)

    def get_allocator(self):
        return _ot3D.adj_get_allocator(self)

    def pop_back(self):
        return _ot3D.adj_pop_back(self)

    def erase(self, *args):
        return _ot3D.adj_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_adj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.adj_push_back(self, x)

    def front(self):
        return _ot3D.adj_front(self)

    def back(self):
        return _ot3D.adj_back(self)

    def assign(self, n, x):
        return _ot3D.adj_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.adj_resize(self, *args)

    def insert(self, *args):
        return _ot3D.adj_insert(self, *args)

    def reserve(self, n):
        return _ot3D.adj_reserve(self, n)

    def capacity(self):
        return _ot3D.adj_capacity(self)
    __swig_destroy__ = _ot3D.delete_adj
    __del__ = lambda self: None
adj_swigregister = _ot3D.adj_swigregister
adj_swigregister(adj)

class EdgeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.EdgeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.EdgeList___nonzero__(self)

    def __bool__(self):
        return _ot3D.EdgeList___bool__(self)

    def __len__(self):
        return _ot3D.EdgeList___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.EdgeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.EdgeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.EdgeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.EdgeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.EdgeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.EdgeList___setitem__(self, *args)

    def pop(self):
        return _ot3D.EdgeList_pop(self)

    def append(self, x):
        return _ot3D.EdgeList_append(self, x)

    def empty(self):
        return _ot3D.EdgeList_empty(self)

    def size(self):
        return _ot3D.EdgeList_size(self)

    def swap(self, v):
        return _ot3D.EdgeList_swap(self, v)

    def begin(self):
        return _ot3D.EdgeList_begin(self)

    def end(self):
        return _ot3D.EdgeList_end(self)

    def rbegin(self):
        return _ot3D.EdgeList_rbegin(self)

    def rend(self):
        return _ot3D.EdgeList_rend(self)

    def clear(self):
        return _ot3D.EdgeList_clear(self)

    def get_allocator(self):
        return _ot3D.EdgeList_get_allocator(self)

    def pop_back(self):
        return _ot3D.EdgeList_pop_back(self)

    def erase(self, *args):
        return _ot3D.EdgeList_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_EdgeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.EdgeList_push_back(self, x)

    def front(self):
        return _ot3D.EdgeList_front(self)

    def back(self):
        return _ot3D.EdgeList_back(self)

    def assign(self, n, x):
        return _ot3D.EdgeList_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.EdgeList_resize(self, *args)

    def insert(self, *args):
        return _ot3D.EdgeList_insert(self, *args)

    def pop_front(self):
        return _ot3D.EdgeList_pop_front(self)

    def push_front(self, x):
        return _ot3D.EdgeList_push_front(self, x)

    def reverse(self):
        return _ot3D.EdgeList_reverse(self)
    __swig_destroy__ = _ot3D.delete_EdgeList
    __del__ = lambda self: None
EdgeList_swigregister = _ot3D.EdgeList_swigregister
EdgeList_swigregister(EdgeList)

class adjEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adjEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adjEdge, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.adjEdge_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.adjEdge___nonzero__(self)

    def __bool__(self):
        return _ot3D.adjEdge___bool__(self)

    def __len__(self):
        return _ot3D.adjEdge___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.adjEdge___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.adjEdge___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.adjEdge___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.adjEdge___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.adjEdge___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.adjEdge___setitem__(self, *args)

    def pop(self):
        return _ot3D.adjEdge_pop(self)

    def append(self, x):
        return _ot3D.adjEdge_append(self, x)

    def empty(self):
        return _ot3D.adjEdge_empty(self)

    def size(self):
        return _ot3D.adjEdge_size(self)

    def swap(self, v):
        return _ot3D.adjEdge_swap(self, v)

    def begin(self):
        return _ot3D.adjEdge_begin(self)

    def end(self):
        return _ot3D.adjEdge_end(self)

    def rbegin(self):
        return _ot3D.adjEdge_rbegin(self)

    def rend(self):
        return _ot3D.adjEdge_rend(self)

    def clear(self):
        return _ot3D.adjEdge_clear(self)

    def get_allocator(self):
        return _ot3D.adjEdge_get_allocator(self)

    def pop_back(self):
        return _ot3D.adjEdge_pop_back(self)

    def erase(self, *args):
        return _ot3D.adjEdge_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_adjEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.adjEdge_push_back(self, x)

    def front(self):
        return _ot3D.adjEdge_front(self)

    def back(self):
        return _ot3D.adjEdge_back(self)

    def assign(self, n, x):
        return _ot3D.adjEdge_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.adjEdge_resize(self, *args)

    def insert(self, *args):
        return _ot3D.adjEdge_insert(self, *args)

    def reserve(self, n):
        return _ot3D.adjEdge_reserve(self, n)

    def capacity(self):
        return _ot3D.adjEdge_capacity(self)
    __swig_destroy__ = _ot3D.delete_adjEdge
    __del__ = lambda self: None
adjEdge_swigregister = _ot3D.adjEdge_swigregister
adjEdge_swigregister(adjEdge)

class ListDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.ListDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.ListDouble___nonzero__(self)

    def __bool__(self):
        return _ot3D.ListDouble___bool__(self)

    def __len__(self):
        return _ot3D.ListDouble___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.ListDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.ListDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.ListDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.ListDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.ListDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.ListDouble___setitem__(self, *args)

    def pop(self):
        return _ot3D.ListDouble_pop(self)

    def append(self, x):
        return _ot3D.ListDouble_append(self, x)

    def empty(self):
        return _ot3D.ListDouble_empty(self)

    def size(self):
        return _ot3D.ListDouble_size(self)

    def swap(self, v):
        return _ot3D.ListDouble_swap(self, v)

    def begin(self):
        return _ot3D.ListDouble_begin(self)

    def end(self):
        return _ot3D.ListDouble_end(self)

    def rbegin(self):
        return _ot3D.ListDouble_rbegin(self)

    def rend(self):
        return _ot3D.ListDouble_rend(self)

    def clear(self):
        return _ot3D.ListDouble_clear(self)

    def get_allocator(self):
        return _ot3D.ListDouble_get_allocator(self)

    def pop_back(self):
        return _ot3D.ListDouble_pop_back(self)

    def erase(self, *args):
        return _ot3D.ListDouble_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_ListDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.ListDouble_push_back(self, x)

    def front(self):
        return _ot3D.ListDouble_front(self)

    def back(self):
        return _ot3D.ListDouble_back(self)

    def assign(self, n, x):
        return _ot3D.ListDouble_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.ListDouble_resize(self, *args)

    def insert(self, *args):
        return _ot3D.ListDouble_insert(self, *args)

    def reserve(self, n):
        return _ot3D.ListDouble_reserve(self, n)

    def capacity(self):
        return _ot3D.ListDouble_capacity(self)
    __swig_destroy__ = _ot3D.delete_ListDouble
    __del__ = lambda self: None
ListDouble_swigregister = _ot3D.ListDouble_swigregister
ListDouble_swigregister(ListDouble)

class dualPointList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dualPointList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dualPointList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.dualPointList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.dualPointList___nonzero__(self)

    def __bool__(self):
        return _ot3D.dualPointList___bool__(self)

    def __len__(self):
        return _ot3D.dualPointList___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.dualPointList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.dualPointList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.dualPointList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.dualPointList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.dualPointList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.dualPointList___setitem__(self, *args)

    def pop(self):
        return _ot3D.dualPointList_pop(self)

    def append(self, x):
        return _ot3D.dualPointList_append(self, x)

    def empty(self):
        return _ot3D.dualPointList_empty(self)

    def size(self):
        return _ot3D.dualPointList_size(self)

    def swap(self, v):
        return _ot3D.dualPointList_swap(self, v)

    def begin(self):
        return _ot3D.dualPointList_begin(self)

    def end(self):
        return _ot3D.dualPointList_end(self)

    def rbegin(self):
        return _ot3D.dualPointList_rbegin(self)

    def rend(self):
        return _ot3D.dualPointList_rend(self)

    def clear(self):
        return _ot3D.dualPointList_clear(self)

    def get_allocator(self):
        return _ot3D.dualPointList_get_allocator(self)

    def pop_back(self):
        return _ot3D.dualPointList_pop_back(self)

    def erase(self, *args):
        return _ot3D.dualPointList_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_dualPointList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.dualPointList_push_back(self, x)

    def front(self):
        return _ot3D.dualPointList_front(self)

    def back(self):
        return _ot3D.dualPointList_back(self)

    def assign(self, n, x):
        return _ot3D.dualPointList_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.dualPointList_resize(self, *args)

    def insert(self, *args):
        return _ot3D.dualPointList_insert(self, *args)

    def pop_front(self):
        return _ot3D.dualPointList_pop_front(self)

    def push_front(self, x):
        return _ot3D.dualPointList_push_front(self, x)

    def reverse(self):
        return _ot3D.dualPointList_reverse(self)
    __swig_destroy__ = _ot3D.delete_dualPointList
    __del__ = lambda self: None
dualPointList_swigregister = _ot3D.dualPointList_swigregister
dualPointList_swigregister(dualPointList)

class primalPtlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, primalPtlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, primalPtlist, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.primalPtlist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.primalPtlist___nonzero__(self)

    def __bool__(self):
        return _ot3D.primalPtlist___bool__(self)

    def __len__(self):
        return _ot3D.primalPtlist___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.primalPtlist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.primalPtlist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.primalPtlist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.primalPtlist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.primalPtlist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.primalPtlist___setitem__(self, *args)

    def pop(self):
        return _ot3D.primalPtlist_pop(self)

    def append(self, x):
        return _ot3D.primalPtlist_append(self, x)

    def empty(self):
        return _ot3D.primalPtlist_empty(self)

    def size(self):
        return _ot3D.primalPtlist_size(self)

    def swap(self, v):
        return _ot3D.primalPtlist_swap(self, v)

    def begin(self):
        return _ot3D.primalPtlist_begin(self)

    def end(self):
        return _ot3D.primalPtlist_end(self)

    def rbegin(self):
        return _ot3D.primalPtlist_rbegin(self)

    def rend(self):
        return _ot3D.primalPtlist_rend(self)

    def clear(self):
        return _ot3D.primalPtlist_clear(self)

    def get_allocator(self):
        return _ot3D.primalPtlist_get_allocator(self)

    def pop_back(self):
        return _ot3D.primalPtlist_pop_back(self)

    def erase(self, *args):
        return _ot3D.primalPtlist_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_primalPtlist(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.primalPtlist_push_back(self, x)

    def front(self):
        return _ot3D.primalPtlist_front(self)

    def back(self):
        return _ot3D.primalPtlist_back(self)

    def assign(self, n, x):
        return _ot3D.primalPtlist_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.primalPtlist_resize(self, *args)

    def insert(self, *args):
        return _ot3D.primalPtlist_insert(self, *args)

    def pop_front(self):
        return _ot3D.primalPtlist_pop_front(self)

    def push_front(self, x):
        return _ot3D.primalPtlist_push_front(self, x)

    def reverse(self):
        return _ot3D.primalPtlist_reverse(self)
    __swig_destroy__ = _ot3D.delete_primalPtlist
    __del__ = lambda self: None
primalPtlist_swigregister = _ot3D.primalPtlist_swigregister
primalPtlist_swigregister(primalPtlist)

class Linelist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linelist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Linelist, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ot3D.Linelist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ot3D.Linelist___nonzero__(self)

    def __bool__(self):
        return _ot3D.Linelist___bool__(self)

    def __len__(self):
        return _ot3D.Linelist___len__(self)

    def __getslice__(self, i, j):
        return _ot3D.Linelist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ot3D.Linelist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ot3D.Linelist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ot3D.Linelist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ot3D.Linelist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ot3D.Linelist___setitem__(self, *args)

    def pop(self):
        return _ot3D.Linelist_pop(self)

    def append(self, x):
        return _ot3D.Linelist_append(self, x)

    def empty(self):
        return _ot3D.Linelist_empty(self)

    def size(self):
        return _ot3D.Linelist_size(self)

    def swap(self, v):
        return _ot3D.Linelist_swap(self, v)

    def begin(self):
        return _ot3D.Linelist_begin(self)

    def end(self):
        return _ot3D.Linelist_end(self)

    def rbegin(self):
        return _ot3D.Linelist_rbegin(self)

    def rend(self):
        return _ot3D.Linelist_rend(self)

    def clear(self):
        return _ot3D.Linelist_clear(self)

    def get_allocator(self):
        return _ot3D.Linelist_get_allocator(self)

    def pop_back(self):
        return _ot3D.Linelist_pop_back(self)

    def erase(self, *args):
        return _ot3D.Linelist_erase(self, *args)

    def __init__(self, *args):
        this = _ot3D.new_Linelist(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ot3D.Linelist_push_back(self, x)

    def front(self):
        return _ot3D.Linelist_front(self)

    def back(self):
        return _ot3D.Linelist_back(self)

    def assign(self, n, x):
        return _ot3D.Linelist_assign(self, n, x)

    def resize(self, *args):
        return _ot3D.Linelist_resize(self, *args)

    def insert(self, *args):
        return _ot3D.Linelist_insert(self, *args)

    def pop_front(self):
        return _ot3D.Linelist_pop_front(self)

    def push_front(self, x):
        return _ot3D.Linelist_push_front(self, x)

    def reverse(self):
        return _ot3D.Linelist_reverse(self)
    __swig_destroy__ = _ot3D.delete_Linelist
    __del__ = lambda self: None
Linelist_swigregister = _ot3D.Linelist_swigregister
Linelist_swigregister(Linelist)

class derivInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, derivInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, derivInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gradient"] = _ot3D.derivInfo_gradient_set
    __swig_getmethods__["gradient"] = _ot3D.derivInfo_gradient_get
    if _newclass:
        gradient = _swig_property(_ot3D.derivInfo_gradient_get, _ot3D.derivInfo_gradient_set)
    __swig_setmethods__["costFunction"] = _ot3D.derivInfo_costFunction_set
    __swig_getmethods__["costFunction"] = _ot3D.derivInfo_costFunction_get
    if _newclass:
        costFunction = _swig_property(_ot3D.derivInfo_costFunction_get, _ot3D.derivInfo_costFunction_set)
    __swig_setmethods__["nbHidden"] = _ot3D.derivInfo_nbHidden_set
    __swig_getmethods__["nbHidden"] = _ot3D.derivInfo_nbHidden_get
    if _newclass:
        nbHidden = _swig_property(_ot3D.derivInfo_nbHidden_get, _ot3D.derivInfo_nbHidden_set)
    __swig_setmethods__["ezHidden"] = _ot3D.derivInfo_ezHidden_set
    __swig_getmethods__["ezHidden"] = _ot3D.derivInfo_ezHidden_get
    if _newclass:
        ezHidden = _swig_property(_ot3D.derivInfo_ezHidden_get, _ot3D.derivInfo_ezHidden_set)

    def __init__(self):
        this = _ot3D.new_derivInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ot3D.delete_derivInfo
    __del__ = lambda self: None
derivInfo_swigregister = _ot3D.derivInfo_swigregister
derivInfo_swigregister(derivInfo)

class optimResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, optimResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, optimResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phiOpt"] = _ot3D.optimResult_phiOpt_set
    __swig_getmethods__["phiOpt"] = _ot3D.optimResult_phiOpt_get
    if _newclass:
        phiOpt = _swig_property(_ot3D.optimResult_phiOpt_get, _ot3D.optimResult_phiOpt_set)
    __swig_setmethods__["costFunction"] = _ot3D.optimResult_costFunction_set
    __swig_getmethods__["costFunction"] = _ot3D.optimResult_costFunction_get
    if _newclass:
        costFunction = _swig_property(_ot3D.optimResult_costFunction_get, _ot3D.optimResult_costFunction_set)
    __swig_setmethods__["nbIter"] = _ot3D.optimResult_nbIter_set
    __swig_getmethods__["nbIter"] = _ot3D.optimResult_nbIter_get
    if _newclass:
        nbIter = _swig_property(_ot3D.optimResult_nbIter_get, _ot3D.optimResult_nbIter_set)
    __swig_setmethods__["wallTime"] = _ot3D.optimResult_wallTime_set
    __swig_getmethods__["wallTime"] = _ot3D.optimResult_wallTime_get
    if _newclass:
        wallTime = _swig_property(_ot3D.optimResult_wallTime_get, _ot3D.optimResult_wallTime_set)

    def __init__(self):
        this = _ot3D.new_optimResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ot3D.delete_optimResult
    __del__ = lambda self: None
optimResult_swigregister = _ot3D.optimResult_swigregister
optimResult_swigregister(optimResult)

class optimResultResearch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, optimResultResearch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, optimResultResearch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stp"] = _ot3D.optimResultResearch_stp_set
    __swig_getmethods__["stp"] = _ot3D.optimResultResearch_stp_get
    if _newclass:
        stp = _swig_property(_ot3D.optimResultResearch_stp_get, _ot3D.optimResultResearch_stp_set)
    __swig_setmethods__["nrm"] = _ot3D.optimResultResearch_nrm_set
    __swig_getmethods__["nrm"] = _ot3D.optimResultResearch_nrm_get
    if _newclass:
        nrm = _swig_property(_ot3D.optimResultResearch_nrm_get, _ot3D.optimResultResearch_nrm_set)
    __swig_setmethods__["cst"] = _ot3D.optimResultResearch_cst_set
    __swig_getmethods__["cst"] = _ot3D.optimResultResearch_cst_get
    if _newclass:
        cst = _swig_property(_ot3D.optimResultResearch_cst_get, _ot3D.optimResultResearch_cst_set)
    __swig_setmethods__["tme"] = _ot3D.optimResultResearch_tme_set
    __swig_getmethods__["tme"] = _ot3D.optimResultResearch_tme_get
    if _newclass:
        tme = _swig_property(_ot3D.optimResultResearch_tme_get, _ot3D.optimResultResearch_tme_set)
    __swig_setmethods__["hddn"] = _ot3D.optimResultResearch_hddn_set
    __swig_getmethods__["hddn"] = _ot3D.optimResultResearch_hddn_get
    if _newclass:
        hddn = _swig_property(_ot3D.optimResultResearch_hddn_get, _ot3D.optimResultResearch_hddn_set)
    __swig_setmethods__["nbtt"] = _ot3D.optimResultResearch_nbtt_set
    __swig_getmethods__["nbtt"] = _ot3D.optimResultResearch_nbtt_get
    if _newclass:
        nbtt = _swig_property(_ot3D.optimResultResearch_nbtt_get, _ot3D.optimResultResearch_nbtt_set)
    __swig_setmethods__["wllTme"] = _ot3D.optimResultResearch_wllTme_set
    __swig_getmethods__["wllTme"] = _ot3D.optimResultResearch_wllTme_get
    if _newclass:
        wllTme = _swig_property(_ot3D.optimResultResearch_wllTme_get, _ot3D.optimResultResearch_wllTme_set)

    def __init__(self):
        this = _ot3D.new_optimResultResearch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ot3D.delete_optimResultResearch
    __del__ = lambda self: None
optimResultResearch_swigregister = _ot3D.optimResultResearch_swigregister
optimResultResearch_swigregister(optimResultResearch)

class OTproblem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTproblem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTproblem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parallelComputation"] = _ot3D.OTproblem_parallelComputation_set
    __swig_getmethods__["parallelComputation"] = _ot3D.OTproblem_parallelComputation_get
    if _newclass:
        parallelComputation = _swig_property(_ot3D.OTproblem_parallelComputation_get, _ot3D.OTproblem_parallelComputation_set)
    __swig_setmethods__["nbCore"] = _ot3D.OTproblem_nbCore_set
    __swig_getmethods__["nbCore"] = _ot3D.OTproblem_nbCore_get
    if _newclass:
        nbCore = _swig_property(_ot3D.OTproblem_nbCore_get, _ot3D.OTproblem_nbCore_set)

    def printCGALVERSION(self):
        return _ot3D.OTproblem_printCGALVERSION(self)

    def __init__(self):
        this = _ot3D.new_OTproblem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setLaguerrePosition(self, positionX, positionY, positionZ):
        return _ot3D.OTproblem_setLaguerrePosition(self, positionX, positionY, positionZ)

    def setPolyline(self, positionX, positionY, positionZ, weight):
        return _ot3D.OTproblem_setPolyline(self, positionX, positionY, positionZ, weight)

    def setPolylineNew(self, positionX, positionY, positionZ, weight):
        return _ot3D.OTproblem_setPolylineNew(self, positionX, positionY, positionZ, weight)

    def setLaguerrePsi(self, weight):
        return _ot3D.OTproblem_setLaguerrePsi(self, weight)

    def computeAll(self, nMass, nCost, nBar):
        return _ot3D.OTproblem_computeAll(self, nMass, nCost, nBar)

    def computeDeriv(self, nMass, nCost):
        return _ot3D.OTproblem_computeDeriv(self, nMass, nCost)

    def computeHessian(self):
        return _ot3D.OTproblem_computeHessian(self)

    def computeDerivTotal(self, nMass, nCost, nRho):
        return _ot3D.OTproblem_computeDerivTotal(self, nMass, nCost, nRho)

    def computePolyInfo(self, nMass, nCost):
        return _ot3D.OTproblem_computePolyInfo(self, nMass, nCost)

    def setMassDiracs(self, nMass):
        return _ot3D.OTproblem_setMassDiracs(self, nMass)

    def perfomOptimPsiBFGS(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBFGS(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, parallel, nbCore)

    def perfomOptimPsiConstantGD(self, stepSize, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiConstantGD(self, stepSize, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiGreedyGD(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiGreedyGD(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiStrongWolfGD(self, stepSize, gradTol, nMaxIter, w1, w2, wMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiStrongWolfGD(self, stepSize, gradTol, nMaxIter, w1, w2, wMaxIter, parallel, nbCore)

    def perfomOptimPsiBarzilaiB(self, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiB(self, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiBarzilaiBWolf(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiBWolf(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, parallel, nbCore)

    def perfomOptimPsiBarzilaiBWolf2(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, maxHiddenIncrease, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiBWolf2(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, maxHiddenIncrease, parallel, nbCore)

    def perfomOptimPsiHeavyBall(self, lipschitzConstant, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBall(self, lipschitzConstant, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiHeavyBallFred(self, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBallFred(self, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiHeavyBallGreedy(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBallGreedy(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiPolyak(self, lenAlpha, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiPolyak(self, lenAlpha, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiBFGSUnleashDaBeast(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBFGSUnleashDaBeast(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore)

    def perfomOptimPsiBFGSUnleashDaBeastRestart(self, lenPsi, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBFGSUnleashDaBeastRestart(self, lenPsi, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore)

    def perfomOptimPsiBFGSResearch(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBFGSResearch(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, parallel, nbCore)

    def perfomOptimPsiConstantGDResearch(self, stepSize, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiConstantGDResearch(self, stepSize, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiGreedyGDResearch(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiGreedyGDResearch(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiStrongWolfGDResearch(self, stepSize, gradTol, nMaxIter, w1, w2, wMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiStrongWolfGDResearch(self, stepSize, gradTol, nMaxIter, w1, w2, wMaxIter, parallel, nbCore)

    def perfomOptimPsiBarzilaiBResearch(self, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiBResearch(self, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiBarzilaiBWolfResearch(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiBWolfResearch(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, parallel, nbCore)

    def perfomOptimPsiBarzilaiBWolf2Research(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, maxHiddenIncrease, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBarzilaiBWolf2Research(self, gradTol, lineSearchRed, gammaWolf, nMaxIter, memSize, maxHiddenIncrease, parallel, nbCore)

    def perfomOptimPsiHeavyBallResearch(self, lipschitzConstant, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBallResearch(self, lipschitzConstant, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiHeavyBallFredResearch(self, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBallFredResearch(self, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiHeavyBallGreedyResearch(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHeavyBallGreedyResearch(self, nStep, nScoring, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiPolyakResearch(self, lenAlpha, gradTol, nMaxIter, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiPolyakResearch(self, lenAlpha, gradTol, nMaxIter, parallel, nbCore)

    def perfomOptimPsiBFGSUnleashDaBeastResearch(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiBFGSUnleashDaBeastResearch(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore)

    def perfomOptimPsiHessLM(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore):
        return _ot3D.OTproblem_perfomOptimPsiHessLM(self, gradTol, nMaxIter, w1, w2, wMaxIter, memSize, leven, parallel, nbCore)

    def computeRanking(self, cf, gNorm, nbHidden, xk, direction, tau, lenTau, score):
        return _ot3D.OTproblem_computeRanking(self, cf, gNorm, nbHidden, xk, direction, tau, lenTau, score)

    def computeRankingCont(self, cf, gNorm, nbHidden, xk, direction, tau, lenTau, score):
        return _ot3D.OTproblem_computeRankingCont(self, cf, gNorm, nbHidden, xk, direction, tau, lenTau, score)

    def computeAlphaStar(self, cf, xk, direction, alpha, lenAplha):
        return _ot3D.OTproblem_computeAlphaStar(self, cf, xk, direction, alpha, lenAplha)

    def getOptimizedPsi(self, nMass):
        return _ot3D.OTproblem_getOptimizedPsi(self, nMass)

    def getOptimizationtime(self):
        return _ot3D.OTproblem_getOptimizationtime(self)

    def getOptimizationCF(self):
        return _ot3D.OTproblem_getOptimizationCF(self)

    def getOptimizationCV(self):
        return _ot3D.OTproblem_getOptimizationCV(self)

    def getSteps(self):
        return _ot3D.OTproblem_getSteps(self)

    def getNorms(self):
        return _ot3D.OTproblem_getNorms(self)

    def getTimes(self):
        return _ot3D.OTproblem_getTimes(self)

    def getCostFunc(self):
        return _ot3D.OTproblem_getCostFunc(self)

    def getHidden(self):
        return _ot3D.OTproblem_getHidden(self)

    def getnbItt(self):
        return _ot3D.OTproblem_getnbItt(self)

    def getWallTime(self):
        return _ot3D.OTproblem_getWallTime(self)

    def getadjEdge(self, arg2):
        return _ot3D.OTproblem_getadjEdge(self, arg2)

    def getadjPrimalPt(self, arg2):
        return _ot3D.OTproblem_getadjPrimalPt(self, arg2)

    def getCutPosition(self, arg2):
        return _ot3D.OTproblem_getCutPosition(self, arg2)

    def getContributorLine(self, arg2):
        return _ot3D.OTproblem_getContributorLine(self, arg2)
    __swig_destroy__ = _ot3D.delete_OTproblem
    __del__ = lambda self: None
OTproblem_swigregister = _ot3D.OTproblem_swigregister
OTproblem_swigregister(OTproblem)

class matCOO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matCOO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matCOO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row"] = _ot3D.matCOO_row_set
    __swig_getmethods__["row"] = _ot3D.matCOO_row_get
    if _newclass:
        row = _swig_property(_ot3D.matCOO_row_get, _ot3D.matCOO_row_set)
    __swig_setmethods__["col"] = _ot3D.matCOO_col_set
    __swig_getmethods__["col"] = _ot3D.matCOO_col_get
    if _newclass:
        col = _swig_property(_ot3D.matCOO_col_get, _ot3D.matCOO_col_set)
    __swig_setmethods__["val"] = _ot3D.matCOO_val_set
    __swig_getmethods__["val"] = _ot3D.matCOO_val_get
    if _newclass:
        val = _swig_property(_ot3D.matCOO_val_get, _ot3D.matCOO_val_set)
    __swig_setmethods__["nr"] = _ot3D.matCOO_nr_set
    __swig_getmethods__["nr"] = _ot3D.matCOO_nr_get
    if _newclass:
        nr = _swig_property(_ot3D.matCOO_nr_get, _ot3D.matCOO_nr_set)
    __swig_setmethods__["nc"] = _ot3D.matCOO_nc_set
    __swig_getmethods__["nc"] = _ot3D.matCOO_nc_get
    if _newclass:
        nc = _swig_property(_ot3D.matCOO_nc_get, _ot3D.matCOO_nc_set)

    def __init__(self, *args):
        this = _ot3D.new_matCOO(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toSparseEigen(self):
        return _ot3D.matCOO_toSparseEigen(self)

    def Extract(self, Mask, NewIndice, size):
        return _ot3D.matCOO_Extract(self, Mask, NewIndice, size)

    def push(self, Prow, Pcol, Pval):
        return _ot3D.matCOO_push(self, Prow, Pcol, Pval)

    def getDimRow(self):
        return _ot3D.matCOO_getDimRow(self)

    def getDimCol(self):
        return _ot3D.matCOO_getDimCol(self)

    def isSquared(self):
        return _ot3D.matCOO_isSquared(self)
    __swig_destroy__ = _ot3D.delete_matCOO
    __del__ = lambda self: None
matCOO_swigregister = _ot3D.matCOO_swigregister
matCOO_swigregister(matCOO)

class BFGS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BFGS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BFGS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_BFGS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addDirection(self, step, direction, gradNew, gradOld):
        return _ot3D.BFGS_addDirection(self, step, direction, gradNew, gradOld)

    def findDirection(self, gradf):
        return _ot3D.BFGS_findDirection(self, gradf)
    __swig_destroy__ = _ot3D.delete_BFGS
    __del__ = lambda self: None
BFGS_swigregister = _ot3D.BFGS_swigregister
BFGS_swigregister(BFGS)

class gradientDescent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradientDescent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gradientDescent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_gradientDescent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setStep(self, s):
        return _ot3D.gradientDescent_setStep(self, s)

    def step(self):
        return _ot3D.gradientDescent_step(self)

    def gradN(self):
        return _ot3D.gradientDescent_gradN(self)

    def iMax(self):
        return _ot3D.gradientDescent_iMax(self)
    __swig_destroy__ = _ot3D.delete_gradientDescent
    __del__ = lambda self: None
gradientDescent_swigregister = _ot3D.gradientDescent_swigregister
gradientDescent_swigregister(gradientDescent)

class gradientStrongWolf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradientStrongWolf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gradientStrongWolf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_gradientStrongWolf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def step(self):
        return _ot3D.gradientStrongWolf_step(self)

    def gradN(self):
        return _ot3D.gradientStrongWolf_gradN(self)

    def w1(self):
        return _ot3D.gradientStrongWolf_w1(self)

    def w2(self):
        return _ot3D.gradientStrongWolf_w2(self)

    def innerMax(self):
        return _ot3D.gradientStrongWolf_innerMax(self)

    def iMax(self):
        return _ot3D.gradientStrongWolf_iMax(self)
    __swig_destroy__ = _ot3D.delete_gradientStrongWolf
    __del__ = lambda self: None
gradientStrongWolf_swigregister = _ot3D.gradientStrongWolf_swigregister
gradientStrongWolf_swigregister(gradientStrongWolf)

class barzilaiBorwein(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, barzilaiBorwein, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, barzilaiBorwein, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_barzilaiBorwein(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def gradN(self):
        return _ot3D.barzilaiBorwein_gradN(self)

    def iMax(self):
        return _ot3D.barzilaiBorwein_iMax(self)
    __swig_setmethods__["bbStep"] = _ot3D.barzilaiBorwein_bbStep_set
    __swig_getmethods__["bbStep"] = _ot3D.barzilaiBorwein_bbStep_get
    if _newclass:
        bbStep = _swig_property(_ot3D.barzilaiBorwein_bbStep_get, _ot3D.barzilaiBorwein_bbStep_set)
    __swig_destroy__ = _ot3D.delete_barzilaiBorwein
    __del__ = lambda self: None
barzilaiBorwein_swigregister = _ot3D.barzilaiBorwein_swigregister
barzilaiBorwein_swigregister(barzilaiBorwein)

class barzilaiBorweinLS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, barzilaiBorweinLS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, barzilaiBorweinLS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_barzilaiBorweinLS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def gradN(self):
        return _ot3D.barzilaiBorweinLS_gradN(self)

    def lSearch(self):
        return _ot3D.barzilaiBorweinLS_lSearch(self)

    def gamma(self):
        return _ot3D.barzilaiBorweinLS_gamma(self)

    def addCost(self, cost):
        return _ot3D.barzilaiBorweinLS_addCost(self, cost)

    def minCost(self):
        return _ot3D.barzilaiBorweinLS_minCost(self)

    def iMax(self):
        return _ot3D.barzilaiBorweinLS_iMax(self)
    __swig_setmethods__["bbStep"] = _ot3D.barzilaiBorweinLS_bbStep_set
    __swig_getmethods__["bbStep"] = _ot3D.barzilaiBorweinLS_bbStep_get
    if _newclass:
        bbStep = _swig_property(_ot3D.barzilaiBorweinLS_bbStep_get, _ot3D.barzilaiBorweinLS_bbStep_set)
    __swig_destroy__ = _ot3D.delete_barzilaiBorweinLS
    __del__ = lambda self: None
barzilaiBorweinLS_swigregister = _ot3D.barzilaiBorweinLS_swigregister
barzilaiBorweinLS_swigregister(barzilaiBorweinLS)

class heavyBall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, heavyBall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, heavyBall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ot3D.new_heavyBall(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def L(self):
        return _ot3D.heavyBall_L(self)

    def gradN(self):
        return _ot3D.heavyBall_gradN(self)

    def iMax(self):
        return _ot3D.heavyBall_iMax(self)
    __swig_destroy__ = _ot3D.delete_heavyBall
    __del__ = lambda self: None
heavyBall_swigregister = _ot3D.heavyBall_swigregister
heavyBall_swigregister(heavyBall)

# This file is compatible with both classic and new-style classes.


